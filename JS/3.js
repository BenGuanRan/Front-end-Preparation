// ------------ 问题 4
/** 给一个递增的数组 a （元素可以有相同的值），含有 a.length 个元素，一个目标值 t, 求数组 a 中小于 t 的元素个数
    （请用最高效的算法实现，并注明时间复杂度）
    
    @param {number[]} a: 递增的数组
    @param {number} t: 目标值 t
    
    @returns {number} 数组 a 中小于 t 的元素的个数
    
    例子:
        f([1, 3, 6, 6, 8, 12], 0) === 0  
        f([1, 3, 6, 6, 8, 12], 1) === 0  
        f([1, 3, 6, 6, 8, 12], 2) === 1  
        f([1, 3, 6, 6, 8, 12], 3) === 1  
        f([1, 3, 6, 6, 8, 12], 4) === 2  
        f([1, 3, 6, 6, 8, 12], 6) === 2  
        f([1, 3, 6, 6, 8, 12], 7) === 4  
        f([1, 3, 6, 6, 8, 12], 8) === 4  
        f([1, 3, 6, 6, 8, 12], 9) === 5  
        f([1, 3, 6, 6, 8, 12], 12) === 5  
        f([1, 3, 6, 6, 8, 12], 13) === 6  
*/
function f(a, t) {
    // 二分法或倍增法，这里采用二分法
    let l = 0, r = a.length - 1
    while (l <= r) {
        let m = Math.floor((l + r) / 2)
        if (a[m] < t && a[m + 1] >= t)
            return console.log(m + 1);
        else if (a[m] >= t)
            r = m - 1
        else
            l = m + 1
    }
    return console.log(l)
}

